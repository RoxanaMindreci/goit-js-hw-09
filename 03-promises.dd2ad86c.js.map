{"mappings":"iiBAuBA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,KAAK,CAAEC,SAAU,eAEjC,IAAMC,EAASC,SAASC,cAAc,SAChCC,EAAUF,SAASC,cAAc,kBACjCE,EAASH,SAASC,cAAc,iBAChCG,EAAWJ,SAASC,cAAc,mBAExC,SAASI,EAAcP,EAAUQ,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,CAAChB,WAAUQ,SACtBK,EAEFH,EAAQM,GAGRL,EAAOK,E,GAERR,E,IAIPP,EAAOgB,iBAAiB,UAExB,SAAsBC,GACpBA,EAAMC,iBACN,IAAIC,EAAaC,OAAOjB,EAAQkB,OAC1BC,EAAYF,OAAOhB,EAAOiB,OAC1BE,EAAcH,OAAOf,EAASgB,OACpCrB,EAAOwB,QAEP,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCnB,EAAcmB,EAAGN,GAChBO,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUQ,EAAKoB,EAALpB,MACjBX,EAAAF,GAASG,OAAO+B,QAAQ,qBAAoCC,OAAf9B,EAAS,QAAY8B,OAANtB,EAAM,M,IAEnEuB,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUQ,EAAKoB,EAALpB,MAClBX,EAAAF,GAASG,OAAOkC,QAAQ,oBAAmCF,OAAf9B,EAAS,QAAY8B,OAANtB,EAAM,M,IAGnEY,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["//Exercițiul 3 - generator de promise-uri\n//Îndepliniți acest task în fișierele 03-promises.html și 03-promises.js. Urmăriți filmulețul demonstrativ al generatorului \n//de promise - uri.\n\n//HTML-ul de mai jos conține un marcaj de formular în care utilizatorul va introduce prima întârziere în\n//milisecunde, apoi pasul pentru creșterea întârzierii pentru fiecare promise și numărul de promise - uri care urmează a fi create.\n\n//Scrieți un script care, atunci când se trimite un formular, apelează funcția createPromise(position, delay) de atâtea ori de câte este specificat în câmpul amount. La fiecare apel, transmiteți-i numărul promise-ului creat (position) și întârzierea ținând cont de primul (delay) introdus de utilizator și pasul (step).\n\n//Modificați codul funcției createPromise astfel încât să returneze un promise care va fi executat sau respins \n//după un delay.Valoarea promise - ului trebuie să fie un obiect care conține proprietățile position și delay \n//cu valorile parametrilor ce au același nume.Utilizați codul funcției inițiale pentru a alege ce vei face \n//cu acel promise - fie executat sau respins.\n\n//createPromise(2, 1500)\n//  .then(({ position, delay }) => {\n//    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//  })\n//  .catch(({ position, delay }) => {\n//    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//  });\n\n\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({ position: 'center-top' });\n\nconst formEl = document.querySelector('.form');\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const result = {position, delay}\n      if (shouldResolve) {\n        // Fulfill\n        resolve(result) \n       } else {\n        // Reject\n        reject(result)\n        }\n    }, delay);\n  });\n}\n\nformEl.addEventListener('submit', handleSubmit)\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  let delayValue = Number(delayEl.value);\n  const stepValue = Number(stepEl.value);\n  const amountValue = Number(amountEl.value);\n  formEl.reset();\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, delayValue) // \n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`); // \n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`); // \n    });\n\n    delayValue += stepValue;\n  }\n}"],"names":["$ejkSG","parcelRequire","$parcel$interopDefault","Notify","init","position","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","addEventListener","event","preventDefault","delayValue","Number","value","stepValue","amountValue","reset","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.dd2ad86c.js.map"}